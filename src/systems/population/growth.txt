new named_effect population_tick = {
	# Modifiers
	&birth_modifier := 0
	&birth_modifier &= modifier:global_birth_modifier
	&death_modifier := 0
	&death_modifier &= modifier:global_death_reduction
	
	&emigration := 0
	&immigration := 0
	&attraction := 0
	
	every_owned_province = {
		# Birth Rate
		calculate_birth_rate
		
		# Death Rate
		calculate_death_rate
		
		# Emigration
		calculate_emigration
		
		# Attraction
		calculate_attraction
		
		# Get Total Emigration and Attraction
		owner->&emigration += prev
		owner->&attraction += prev
	}
	
	&immigration := emigration #moving variables
	&temp := attraction #moving variables
	
	every_owned_province = {
		# Immigration
		calculate_immigration
		
		# Growth Rate
		&growth_rate := birth_rate
		&growth_rate -= death_rate
		&growth_rate -= emigration
		&growth_rate += immigration
		
		&pops += growth_rate
		
		# Adjust Development
		adjust_development
		
		# Tooltip Generation
		generate_tooltip_values
	}
}

new named_effect calculate_attraction = {
	&attraction &= modifier:migration_attraction
	&attraction *= birth_size_restriction
	if [&attraction < 1] {
		&attraction := 1
	}
}
new named_effect calculate_emigration = {
	&emigration := pops
	&emigration *= POPULATION_MIGRATION_RATE
	&emigration /= 12
	&temp &= modifier:emigration_modifier
	if [&temp < 0.1] {
		&temp := 0.1
	}
	&emigration *= temp
}
new named_effect calculate_immigration = {
	&immigration := owner
	&immigration *= attraction
	
	&temp := owner
	&immigration /= temp
}
new named_effect calculate_birth_rate = {
	#	Base: Pops * POPULATION_BIRTH_RATE
	&base_birth_rate := pops
	&base_birth_rate *= POPULATION_BIRTH_RATE
	&base_birth_rate /= 12
	
	#	Modifier: 1 + Birth Modifier + Local Birth Modifier
	&birth_modifier := 0
	&birth_modifier &= modifier:local_birth_modifier
	&birth_modifier += owner
	if [&birth_modifier < 0.1] {
		&birth_modifier := 0.1
	}
	
	#	Size Restriction: Province Size / Pops
	&birth_size_restriction &= trigger_value:province_size
	if [&pops > birth_size_restriction] {
		&birth_size_restriction /= pops
	}
	else {
		&birth_size_restriction := 1
	}
	
	#	Final: Base * Modifier * Size Restriction
	&birth_rate := base_birth_rate
	&birth_rate *= birth_modifier
	&birth_rate *= birth_size_restriction
}
new named_effect calculate_death_rate = {
	#	Base: Pops * POPULATION_DEATH_RATE
	&base_death_rate := pops
	&base_death_rate *= POPULATION_DEATH_RATE
	&base_death_rate /= 12
	#	Modifier: 1 + Death Modifier + Local Death Modifier
	&death_modifier := 0
	&death_modifier &= modifier:local_death_reduction
	&death_modifier += owner
	if [&death_modifier < 0.1] {
		&death_modifier := 0.1
	}
	#	Final: Base / Modifier
	&death_rate := base_death_rate
	&death_rate /= death_modifier
}
new named_effect adjust_development = {
	&temp &= development
	&temp *= POP_MULT
	while [&pops >= temp] {
		set_province_flag = cd
		`add_base_production = 1`
		
		&temp &= development
		&temp += 1
		&temp *= POP_MULT
	}
	
	&temp &= development
	&temp *= POP_MULT
	while [&pops < temp] {
		set_province_flag = cd
		`add_base_production = -1`
		
		&temp &= development
		&temp -= 2
		&temp *= POP_MULT
	}
}
new named_effect generate_tooltip_values = {
	&population := pops
	&population *= 1000
	
	&birth_rate *= 1000
	&base_birth_rate *= 1000
	&death_rate *= 1000
	&base_death_rate *= 1000
	&growth_rate *= 1000
	&emigration *= 1000
	&immigration *= 1000
	
	&birth_modifier *= 100
	&birth_size_restriction *= 100
	&death_modifier *= 100
}

on_initialize += {
	every_country = {
		population_tick
	}
}
on_actions:on_monthly_pulse += {
	population_tick
}