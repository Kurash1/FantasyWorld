# Constants
new named_int POPULATION_PER_POP = 10_000
new named_float POPULATION_BIRTH_RATE = 3.8%
new named_float POPULATION_DEATH_RATE = 3.1%
new named_float POPULATION_MIGRATION_RATE = 0.4%

# Evaluated Values
new named_float POP_MULT = ( POPULATION_PER_POP / 1000 )

new modifier_definition global_birth_modifier = {
	name = "Birth Modifier"
	is_percentage = yes
}
new modifier_definition local_birth_modifier = {
	name = "Local Birth Modifier"
	is_percentage = yes
}
new modifier_definition global_death_reduction = {
	name = "Death Reduction"
	is_percentage = yes
}
new modifier_definition local_death_reduction = {
	name = "Local Death Reduction"
	is_percentage = yes
}
new modifier_definition migration_attraction = {
	name = "Migration Attraction"
}

new script_variable growth_rate = {
	name = "Growth Rate"
}

new script_variable birth_rate = {
	name = "Birth Rate"
}
new script_variable base_birth_rate = {
	name = "Base Birth Rate"
}
new script_variable birth_modifier = {
	name = "Birth Modifier"
}
new script_variable birth_size_restriction = {
	name = "Size Restriction"
}

new script_variable death_rate = {
	name = "Death Rate"
}
new script_variable base_death_rate = {
	name = "Base Death Rate"
}
new script_variable death_modifier = {
	name = "Death Modifier"
}

new script_variable emigration = {
	name = "Emigration"
}
new script_variable immigration = {
	name = "Immigration"
}
new script_variable attraction = {
	name = "Attraction"
}

new script_variable pops = {
	name = "Pops"
}
new script_variable population = {
	name = "Population"
}

new effect starting_population = {
	args = float #in thousands
	transpile = {
		new named_int $ = (args / POP_MULT)
		base_tax = 0
		base_production = $
		base_manpower = 0
		
		&pops := args
		&population := pops
		&population *= 1000
		delete = $
	}
}
new effect set_population = {
	args = float #in thousands
	transpile = {
		&pops := args
		&population := pops
		&population *= 1000
		
		adjust_development
	}
}

new struct census = {
	province prov
	float val
}
new effect define_census = {
	args = {
		population = list<census>
	}
	transpile = {
		foreach $1 in args:population {
			$1:prov:history +=! {
				starting_population = $1:val
			}
			census_setter +=! {
				$1:prov = {
					set_population = $1:val
				}
			}
		}
	}
}

new named_effect census_setter = {
	log = "Census Reset"
}
new effect generate_population = {
	args = {
		float desired # in thousands
		float weight # how uniform the development is, 0 is completely uniform
		random seed # for random population numbers
		list<province> provinces # ordered list from most populous to least
	}
	transpile = {
		new named_float $f_sum = 0
		new named_float $f_weight = 1
		
		foreach $prov in args:provinces {
			$f_sum += ( 1 / $f_weight )
			$f_weight += args:weight
		}
		
		$f_weight := 1
		
		foreach $prov in args:provinces {
			new named_float $population = ( ( 1 / $f_weight ) / $f_sum * args:desired + args:seed * 2 - 1 )
			$prov:history +=! {
				starting_population = $population
			}
			census_setter +=! {
				$prov = {
					set_population = $population
				}
			}
			
			$f_weight += args:weight
			delete = $population
		}
		
		delete = $f_sum
		delete = $f_weight
	}
}
new custom_transpile census_reset = {
	write_file "census_reset.txt" = {
		census_setter
	}
}